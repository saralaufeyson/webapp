'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FontFamilyDropdown = require('./FontFamilyDropdown.css');

var _FontFamilyDropdown2 = _interopRequireDefault(_FontFamilyDropdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Edit from https://github.com/nardeas/react-font-picker


var FontFamilyDropdown = function (_Component) {
  _inherits(FontFamilyDropdown, _Component);

  function FontFamilyDropdown(props) {
    _classCallCheck(this, FontFamilyDropdown);

    var _this = _possibleConstructorReturn(this, (FontFamilyDropdown.__proto__ || Object.getPrototypeOf(FontFamilyDropdown)).call(this, props));

    _this.onWrapperClick = function () {
      _this.setState({ isOptionsVisible: !_this.state.isOptionsVisible });
    };

    _this.onOptionClick = function (e, font) {
      e.stopPropagation();

      if (_this.state.isOptionsVisible == false) return;

      if (_this.props.onChange) _this.props.onChange(font);

      _this.setState({ isOptionsVisible: false });
    };

    _this.state = {
      isOptionsVisible: false
    };
    return _this;
  }

  _createClass(FontFamilyDropdown, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          label = _props.label,
          choices = _props.choices;

      var value = this.props.selectedKey;
      return _react2.default.createElement(
        'div',
        { className: _FontFamilyDropdown2.default.wrapper, onClick: this.onWrapperClick },
        _react2.default.createElement(
          'div',
          { className: value === "" ? _FontFamilyDropdown2.default.label : _FontFamilyDropdown2.default.labelFloat },
          label
        ),
        _react2.default.createElement(
          'div',
          { className: _FontFamilyDropdown2.default.selectedOption },
          value
        ),
        _react2.default.createElement('div', { className: _FontFamilyDropdown2.default.button }),
        _react2.default.createElement(
          'div',
          { className: this.state.isOptionsVisible ? _FontFamilyDropdown2.default.options : _FontFamilyDropdown2.default.optionsHidden },
          choices.map(function (item, i) {
            var label = item.label;

            var style = { fontFamily: item.style.fontFamily };
            if (value == label) {
              style.color = '#333';
            }

            return _react2.default.createElement(
              'div',
              { className: _FontFamilyDropdown2.default.option,
                style: style,
                key: i,
                onMouseUp: function onMouseUp(e) {
                  return _this2.onOptionClick(e, label);
                },
                onClick: function onClick(e) {
                  return _this2.onOptionClick(e, label);
                } },
              label
            );
          })
        )
      );
    }
  }]);

  return FontFamilyDropdown;
}(_react.Component);

exports.default = FontFamilyDropdown;
module.exports = exports['default'];